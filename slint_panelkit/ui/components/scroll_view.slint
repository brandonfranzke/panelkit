// Simple ScrollView component
export component ScrollView {
    // Core properties
    in property <length> viewport-width;
    in property <length> viewport-height; 
    in property <length> content-width;
    in property <length> content-height;
    in property <bool> interactive: true;
    in property <bool> vertical-only: false;
    
    // Scroll position
    in-out property <length> scroll-x;
    in-out property <length> scroll-y;
    
    // Callback for scroll changes
    callback scroll-changed(length, length);
    
    // Track if we're scrolling
    out property <bool> is-scrolling: false;
    
    // Main flickable that does the scrolling
    Flickable {
        width: root.viewport-width;
        height: root.viewport-height;
        interactive: root.interactive;
        
        // Set viewport size
        viewport-width: root.content-width;
        viewport-height: root.content-height;
        
        // Two-way binding for scroll position
        viewport-x <=> root.scroll-x;
        viewport-y <=> root.scroll-y;
        
        // This will monitor scroll position but we don't 
        // have a callback since we're using property binding
        TouchArea {
            enabled: false; // Don't handle touch events
            moved => {
                root.is-scrolling = true;
                root.scroll-changed(root.scroll-x, root.scroll-y);
                
                // HACK: We could include a timer here to set is-scrolling
                // to false after a delay, but we'll simplify for now
                
                // In a production app, you might want to use animations
                // or a timer to track scroll state more precisely
            }
        }
        
        // Content container
        Rectangle {
            x: 0px;
            y: 0px;
            width: root.content-width;
            height: root.content-height;
            clip: false;
            @children
        }
    }
}